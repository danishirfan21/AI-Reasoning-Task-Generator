const generateBtn = document.getElementById('generateBtn');
const puzzleCard = document.getElementById('puzzleCard');
const loadingSpinner = document.getElementById('loadingSpinner');
const errorMessage = document.getElementById('errorMessage');
const questionText = document.getElementById('questionText');
const answerText = document.getElementById('answerText');
const explanationText = document.getElementById('explanationText');
const savePuzzleBtn = document.getElementById('savePuzzleBtn');
const downloadPdfBtn = document.getElementById('downloadPdfBtn');

const API_URL = 'http://localhost:3000/api/generate-puzzle';

let currentPuzzle = null;

generateBtn.addEventListener('click', generatePuzzle);
savePuzzleBtn.addEventListener('click', savePuzzle);
downloadPdfBtn.addEventListener('click', downloadPDF);

async function generatePuzzle() {
  // Hide previous results and errors
  puzzleCard.classList.add('hidden');
  errorMessage.classList.add('hidden');

  // Show loading spinner
  loadingSpinner.classList.remove('hidden');

  // Hide the generate button
  generateBtn.style.display = 'none';

  // Hide the saved puzzles link
  const savedLink = document.querySelector('.saved-link');
  if (savedLink) {
    savedLink.style.display = 'none';
  }

  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      throw new Error(`Server error: ${response.status}`);
    }

    const data = await response.json();

    // Store current puzzle
    currentPuzzle = data;

    // Display the puzzle
    questionText.textContent = data.question;
    answerText.textContent = data.answer;
    explanationText.textContent = data.explanation;

    // Hide spinner and show puzzle card
    loadingSpinner.classList.add('hidden');
    puzzleCard.classList.remove('hidden');
  } catch (error) {
    console.error('Error fetching puzzle:', error);

    // Hide spinner
    loadingSpinner.classList.add('hidden');

    // Show error message
    errorMessage.textContent = `Failed to generate puzzle: ${error.message}. Make sure the server is running and your API key is configured.`;
    errorMessage.classList.remove('hidden');
  } finally {
    // Show the generate button again
    generateBtn.style.display = 'inline-block';

    // Show the saved puzzles link again
    if (savedLink) {
      savedLink.style.display = 'inline-block';
    }
  }
}

function savePuzzle() {
  if (!currentPuzzle) return;

  // Get existing puzzles from localStorage
  let savedPuzzles = JSON.parse(localStorage.getItem('savedPuzzles') || '[]');

  // Add timestamp to current puzzle
  const puzzleWithTimestamp = {
    ...currentPuzzle,
    savedAt: new Date().toISOString(),
  };

  // Add to saved puzzles
  savedPuzzles.push(puzzleWithTimestamp);

  // Save back to localStorage
  localStorage.setItem('savedPuzzles', JSON.stringify(savedPuzzles));

  // Visual feedback
  const originalText = savePuzzleBtn.textContent;
  savePuzzleBtn.textContent = 'âœ“ Saved!';
  savePuzzleBtn.style.background = '#38a169';

  setTimeout(() => {
    savePuzzleBtn.textContent = originalText;
    savePuzzleBtn.style.background = '';
  }, 2000);
}

function downloadPDF() {
  if (!currentPuzzle) return;

  const { jsPDF } = window.jspdf;
  const doc = new jsPDF();

  // Set up styling
  const margin = 20;
  const pageWidth = doc.internal.pageSize.getWidth();
  const maxWidth = pageWidth - 2 * margin;

  // Title
  doc.setFontSize(20);
  doc.setTextColor(102, 126, 234);
  doc.text('Logic Puzzle', margin, 20);

  // Question section
  doc.setFontSize(14);
  doc.setTextColor(102, 126, 234);
  doc.text('Question:', margin, 40);

  doc.setFontSize(12);
  doc.setTextColor(51, 51, 51);
  const questionLines = doc.splitTextToSize(currentPuzzle.question, maxWidth);
  doc.text(questionLines, margin, 50);

  // Calculate position for answer section
  const questionHeight = questionLines.length * 7;

  // Answer section
  doc.setFontSize(14);
  doc.setTextColor(102, 126, 234);
  doc.text('Answer:', margin, 60 + questionHeight);

  doc.setFontSize(12);
  doc.setTextColor(45, 55, 72);
  const answerLines = doc.splitTextToSize(currentPuzzle.answer, maxWidth);
  doc.text(answerLines, margin, 70 + questionHeight);

  // Calculate position for explanation section
  const answerHeight = answerLines.length * 7;

  // Explanation section
  doc.setFontSize(14);
  doc.setTextColor(102, 126, 234);
  doc.text('Explanation:', margin, 80 + questionHeight + answerHeight);

  doc.setFontSize(12);
  doc.setTextColor(74, 85, 104);
  const explanationLines = doc.splitTextToSize(
    currentPuzzle.explanation,
    maxWidth
  );
  doc.text(explanationLines, margin, 90 + questionHeight + answerHeight);

  // Footer
  doc.setFontSize(10);
  doc.setTextColor(160, 174, 192);
  doc.text(
    'Generated by AI Logic Puzzle Generator',
    margin,
    doc.internal.pageSize.getHeight() - 10
  );

  // Download
  const timestamp = new Date().toISOString().split('T')[0];
  doc.save(`logic-puzzle-${timestamp}.pdf`);
}
